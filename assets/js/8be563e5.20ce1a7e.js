"use strict";(self.webpackChunkjipcad=self.webpackChunkjipcad||[]).push([[2017],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?i.createElement(f,l(l({ref:t},p),{},{components:n})):i.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7590:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],o={sidebar_position:2},s="Scene & Group Manipulation",d={unversionedId:"lang-ref/manipulation",id:"lang-ref/manipulation",isDocsHomePage:!1,title:"Scene & Group Manipulation",description:"As with generators, look at the exemplars under Exhibition or the worked examples under Tutorials to see these commands used correctly.",source:"@site/docs/lang-ref/manipulation.md",sourceDirName:"lang-ref",slug:"/lang-ref/manipulation",permalink:"/docs/lang-ref/manipulation",editUrl:"https://github.com/JIPCAD/JIPCAD/docs/lang-ref/manipulation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Generators",permalink:"/docs/lang-ref/generators"},next:{title:"Parameters and Sliders",permalink:"/docs/lang-ref/sliders-and-parameters"}},p=[{value:"Instance",id:"instance",children:[],level:2},{value:"Group",id:"group",children:[],level:2},{value:"Subdivision",id:"subdivision",children:[],level:2},{value:"Offset",id:"offset",children:[],level:2}],c={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"scene--group-manipulation"},"Scene & Group Manipulation"),(0,r.kt)("p",null,"As with generators, look at the exemplars under ",(0,r.kt)("a",{parentName:"p",href:"/blog"},"Exhibition")," or the worked examples under ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial/getting-started"},"Tutorials")," to see these commands used correctly."),(0,r.kt)("h2",{id:"instance"},"Instance"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"instance name object\n    [rotate (rx ry rz)(degrees)] [scale (sx sy sz)] [translate (tx ty tz)]\n    [surface surface_id] [LOD LOD_type] [shading shading_type]\nendinstance\n"))),(0,r.kt)("p",null,"Creates an instance of geometry. One can optionally rotate, scale, translate the instance and specify its color, level-of-detail (LOD), and rendering mode."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"object"),": the name of the primitive, generator, or group that will be instantiated."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rotate"),": draws a vector from the origin to the point specified in ",(0,r.kt)("inlineCode",{parentName:"li"},"(rx ry rz)")," and rotates over that axis ",(0,r.kt)("inlineCode",{parentName:"li"},"(degrees)"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scale"),": scales the shape in each included axis by the multiplier given. Ex: ",(0,r.kt)("inlineCode",{parentName:"li"},"scale (1 3 0)")," will retain the x-axis size, multiply the y-axis size by 3 times, and flattens the z-axis completely."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"translate"),": moves shape along the coordinate axes by the given number of units.\nAn instance can be translated, rotated, etc. multiple times within the same line: JIPCAD will execute these commands left to right."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"surface_id"),': a specified surface color, given as an RGB fraction from 0 to 1. When multiple surface colors are given for a generator--such as a sphere within a nested groups--JIPCAD will use the first ("deepest") color defined. For example, RGB (25.6 204.8 0) is equivalent to ',(0,r.kt)("inlineCode",{parentName:"li"},"surface G  color  (0.1 0.8 0) endsurface"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOD_type"),": defined types:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_OFF"),": not rendered"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_BOUND"),": render only the bounding box of this subtree"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_EDGES"),": render this subtree in wireframe mode"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_FULL"),": fully render this subtree"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shading_type"),": defined types:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_INHERIT"),": Shade this node in the same style as its parent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_WIRE"),": render as a wireframe"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_FLAT"),": render with flat shading: one color per polygon"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_GOURAUD"),": render with Gouraud shading; interpolate vertex colors across each polygon"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_PHONG"),": render with Phong shading;  interpolate vertex normals across each polygon and recompute lighting at each pixel"))))),(0,r.kt)("h2",{id:"group"},"Group"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"group id\n    instance id1 object_id1 [instance_parameters] endinstance\n    ...\n    instance idN object_idN [instance_parameters] endinstance\nendgroup\n"))),(0,r.kt)("p",null,"Defines a collection of instances of primitive objects or other groups. Groups are the most general construct to introduce hierarchy into a model description."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": the name of the instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"object_id"),": the name of the object to be instantiated."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[instance_parameters]"),": all the optional parameters discussed above.")),(0,r.kt)("p",null,"Note that creating a group does not display the objects instanced inside of it. Another instance statement must be added for the ",(0,r.kt)("em",{parentName:"p"},"group")," in order to include it in the scene.")),(0,r.kt)("h2",{id:"subdivision"},"Subdivision"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"subdivision id\n    [sd_type sd_flag]\n    sd_level\n    instance id1 object_id1 [xform & color] endinstance\n    ...\n    instance idN object_idN [xform & color] endinstance\nendsubdivision\n"))),(0,r.kt)("p",null,"Subdivides a merged mesh into smaller facets. (Alternatively, can perform subdivision in the GUI: ",(0,r.kt)("inlineCode",{parentName:"p"},"Edit >> Subdivide"),".)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sd_flag"),": the type of subdivision algorithm used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_SD_CatmullClark"),":  the plain and simple CC subdivision"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_SD_CC_sharp"),":  CC subdivision respecting \u201csharp\u201d flags in the mesh."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sd_level"),": the integer number of iterated subdivision steps."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[xform & color]"),": the optional parameters relating to transformations and coloring."))),(0,r.kt)("h2",{id:"offset"},"Offset"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"offset id\n    [offset_type offset_flag]\n    height\n    width\n    instance id1 object_id1 [xform & color] endinstance\n    ...\n    instance idN object_idN [xform & color] endinstance\nendoffset\n"))),(0,r.kt)("p",null,"Thickens a surface mesh of zero thickness into a thicker B-rep that can be 3D-printed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offset_flag"),": the type of thickened surface generated:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_OFFSET_DEFAULT"),": This offsets the starting mesh inward and outward symmetrically.  Each facet in the original mesh maps to two facets in the offset mesh; one of them with reversed orientation.  Each boundary edge of an open polyhedron will map to a quadrilateral facet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOME_OFFSET_GRID"),": The edges of the starting mesh are viewed as thin wires which are then thickened into 4-sided prism segments. This is different from \u201cgridding\u201d the original mesh, where the openings in each facet are a given fraction of the facet geometry."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"height"),": the half-thickness of the generated surface normal to the original facets."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width"),":  the width of the prismatic beams in the tangential direction of each facet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[xform & color]"),":  the optional parameters relating to transformations and coloring."))))}u.isMDXComponent=!0}}]);